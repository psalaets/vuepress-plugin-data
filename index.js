module.exports = createPlugin;

const PLUGIN_NAME = 'vuepress-plugin-data';

function createPlugin(options) {
  const dataSpecs = options.data;
  const promises = startLoading(dataSpecs);

  const eagerData = Promise.all(promises)
    .then(results => {
      return results.reduce((byKey, result, index) => {
        const key = dataSpecs[index].key;
        byKey[key] = result;
        return byKey;
      }, {});
    });

  // Rejection of eagerData is handled asynchronously in enhanceAppFiles()
  // but this no-op handler is needed to prevent PromiseRejectionHandledWarning
  // from node
  eagerData.catch(() => { });

  return {
    name: PLUGIN_NAME,
    async enhanceAppFiles() {
      let data;

      try {
        data = await eagerData;
      } catch (e) {
        throw new Error('Failed to load data');
      }

      return {
        name: `${PLUGIN_NAME}_mixin`,
        content: generateCode(data, PLUGIN_NAME)
      };
    }
  };
}

function generateCode(dataByKey, pluginName) {
  return `// Generated by ${pluginName}
export default ({ Vue }) => {
  Vue.mixin({
    data() {
      return {
        data: ${JSON.stringify(dataByKey, null, 2)}
      };
    }
  });
}
`;
}

function startLoading(dataSpecs) {
  return dataSpecs.map(spec => {
    return toPromise(spec);
  });
}

function toPromise(spec) {
  const { key, value } = spec;
  if (typeof value === 'function') {
    try {
      return Promise.resolve(value())
        .catch(e => {
          console.error(`For key "${key}", value() returned a rejected Promise`);
          console.error(e);
          throw e;
        });
    } catch (e) {
      console.error(`For key "${key}", value() threw an Error`);
      console.error(e);

      return Promise.reject(e);
    }
  } else if (seemsLikePromise(value)) {
    return value
      .catch(e => {
        console.error(`For key "${key}", value was a rejected Promise`);
        console.error(e);
        throw e;
      });
  } else {
    return Promise.resolve(value);
  }
}

function seemsLikePromise(value) {
  return typeof value.then === 'function';
}
